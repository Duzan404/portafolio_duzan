
<script>
	import { gsap } from 'gsap';
	import { ScrollTrigger } from 'gsap/ScrollTrigger';

	// Register ScrollTrigger plugin
	gsap.registerPlugin(ScrollTrigger);

	class GSAPScrollAnimations {
		init() {
			// Initialize all GSAP animations
			this.initFadeAnimations();
			this.initSlideAnimations();
			this.initScaleAnimations();
			this.initStaggerAnimations();
			this.initParallaxEffects();
			this.initCounterAnimations();
			this.initHoverEffects();
		}

		initFadeAnimations() {
			gsap.utils.toArray('.fade-in').forEach((element: any) => {
				gsap.fromTo(element, 
					{ opacity: 0 },
					{
						opacity: 1,
						duration: 1,
						ease: "power2.out",
						scrollTrigger: {
							trigger: element,
							start: "top 85%",
							end: "bottom 15%",
							toggleActions: "play none none reverse"
						}
					}
				);
			});
		}

		initSlideAnimations() {
			// Slide up
			gsap.utils.toArray('.slide-up').forEach((element: any) => {
				gsap.fromTo(element,
					{ y: 50, opacity: 0 },
					{
						y: 0,
						opacity: 1,
						duration: 0.8,
						ease: "power2.out",
						scrollTrigger: {
							trigger: element,
							start: "top 85%",
							toggleActions: "play none none reverse"
						}
					}
				);
			});

			// Slide left
			gsap.utils.toArray('.slide-left').forEach((element: any) => {
				gsap.fromTo(element,
					{ x: -50, opacity: 0 },
					{
						x: 0,
						opacity: 1,
						duration: 0.8,
						ease: "power2.out",
						scrollTrigger: {
							trigger: element,
							start: "top 85%",
							toggleActions: "play none none reverse"
						}
					}
				);
			});

			// Slide right
			gsap.utils.toArray('.slide-right').forEach((element: any) => {
				gsap.fromTo(element,
					{ x: 50, opacity: 0 },
					{
						x: 0,
						opacity: 1,
						duration: 0.8,
						ease: "power2.out",
						scrollTrigger: {
							trigger: element,
							start: "top 85%",
							toggleActions: "play none none reverse"
						}
					}
				);
			});
		}

		initScaleAnimations() {
			gsap.utils.toArray('.scale-in').forEach((element: any) => {
				gsap.fromTo(element,
					{ scale: 0.8, opacity: 0 },
					{
						scale: 1,
						opacity: 1,
						duration: 0.6,
						ease: "back.out(1.7)",
						scrollTrigger: {
							trigger: element,
							start: "top 85%",
							toggleActions: "play none none reverse"
						}
					}
				);
			});
		}

		initStaggerAnimations() {
			gsap.utils.toArray('.stagger-container').forEach((container: any) => {
				const items = container.querySelectorAll('.stagger-item');
				
				gsap.fromTo(items,
					{ y: 30, opacity: 0 },
					{
						y: 0,
						opacity: 1,
						duration: 0.6,
						stagger: 0.1,
						ease: "power2.out",
						scrollTrigger: {
							trigger: container,
							start: "top 85%",
							toggleActions: "play none none reverse"
						}
					}
				);
			});
		}

		initParallaxEffects() {
			gsap.utils.toArray('.parallax').forEach((element: any) => {
				gsap.to(element, {
					yPercent: -50,
					ease: "none",
					scrollTrigger: {
						trigger: element,
						start: "top bottom",
						end: "bottom top",
						scrub: true
					}
				});
			});
		}

		initCounterAnimations() {
			gsap.utils.toArray('.counter').forEach((counter: any) => {
				const target = parseInt(counter.getAttribute('data-target') || '0');
				
				gsap.fromTo(counter,
					{ textContent: 0 },
					{
						textContent: target,
						duration: 2,
						ease: "power2.out",
						snap: { textContent: 1 },
						scrollTrigger: {
							trigger: counter,
							start: "top 80%",
							toggleActions: "play none none reverse"
						}
					}
				);
			});
		}

		initHoverEffects() {
			// Pulse effect
			gsap.utils.toArray('.hover-pulse').forEach((element: any) => {
				element.addEventListener('mouseenter', () => {
					gsap.to(element, { scale: 1.05, duration: 0.3, ease: "power2.out" });
				});
				element.addEventListener('mouseleave', () => {
					gsap.to(element, { scale: 1, duration: 0.3, ease: "power2.out" });
				});
			});

			// Glow effect
			gsap.utils.toArray('.hover-glow').forEach((element: any) => {
				element.addEventListener('mouseenter', () => {
					gsap.to(element, { 
						boxShadow: "0 0 20px rgba(59, 130, 246, 0.5)",
						duration: 0.3,
						ease: "power2.out"
					});
				});
				element.addEventListener('mouseleave', () => {
					gsap.to(element, { 
						boxShadow: "0 0 0px rgba(59, 130, 246, 0)",
						duration: 0.3,
						ease: "power2.out"
					});
				});
			});

			// Lift effect
			gsap.utils.toArray('.hover-lift').forEach((element: any) => {
				element.addEventListener('mouseenter', () => {
					gsap.to(element, { y: -5, duration: 0.3, ease: "power2.out" });
				});
				element.addEventListener('mouseleave', () => {
					gsap.to(element, { y: 0, duration: 0.3, ease: "power2.out" });
				});
			});

			// Gradient animate effect
			gsap.utils.toArray('.gradient-animate').forEach((element: any) => {
				const tl = gsap.timeline({ repeat: -1, yoyo: true });
				tl.to(element, {
					backgroundPosition: "200% center",
					duration: 3,
					ease: "power2.inOut"
				});
			});
		}
	}

	// Initialize animations when DOM is loaded
	document.addEventListener('DOMContentLoaded', () => {
		const animations = new GSAPScrollAnimations();
		animations.init();
	});
</script>

<style is:global>
  /* Base animation styles */
  .fade-in,
  .slide-up,
  .slide-left,
  .slide-right,
  .scale-in,
  .stagger-item {
    opacity: 0;
    transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .slide-up {
    transform: translateY(50px);
  }

  .slide-left {
    transform: translateX(-50px);
  }

  .slide-right {
    transform: translateX(50px);
  }

  .scale-in {
    transform: scale(0.8);
  }

  .stagger-item {
    transform: translateY(30px);
  }

  /* Animated states */
  .animate-fade-in {
    opacity: 1;
  }

  .animate-slide-up {
    opacity: 1;
    transform: translateY(0);
  }

  .animate-slide-left {
    opacity: 1;
    transform: translateX(0);
  }

  .animate-slide-right {
    opacity: 1;
    transform: translateX(0);
  }

  .animate-scale-in {
    opacity: 1;
    transform: scale(1);
  }

  .animate-stagger {
    opacity: 1;
    transform: translateY(0);
  }

  /* Parallax container */
  .parallax-container {
    overflow: hidden;
  }

  .parallax {
    will-change: transform;
  }

  /* Enhanced hover effects */
  .hover-lift {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .hover-lift:hover {
    transform: translateY(-10px);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
  }

  .hover-glow {
    transition: box-shadow 0.3s ease;
  }

  .hover-glow:hover {
    box-shadow: 0 0 30px rgba(102, 126, 234, 0.3);
  }

  /* Text reveal animation */
  .text-reveal {
    overflow: hidden;
  }

  .text-reveal span {
    display: inline-block;
    transform: translateY(100%);
    transition: transform 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .text-reveal.animate span {
    transform: translateY(0);
  }

  /* Floating animation */
  @keyframes float {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-20px); }
  }

  .float {
    animation: float 6s ease-in-out infinite;
  }

  /* Pulse animation */
  @keyframes pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
  }

  .pulse {
    animation: pulse 2s ease-in-out infinite;
  }

  /* Gradient animation */
  @keyframes gradient-shift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }

  .gradient-animate {
    background-size: 200% 200%;
    animation: gradient-shift 3s ease infinite;
  }
</style>
